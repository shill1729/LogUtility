// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// explicit_integrator_grid
Eigen::MatrixXd explicit_integrator_grid(double bankroll, double time_length, double mu, double rate, double volat, double space_epsilon, int time_res, int space_res);
RcppExport SEXP _LogUtility_explicit_integrator_grid(SEXP bankrollSEXP, SEXP time_lengthSEXP, SEXP muSEXP, SEXP rateSEXP, SEXP volatSEXP, SEXP space_epsilonSEXP, SEXP time_resSEXP, SEXP space_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bankroll(bankrollSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type volat(volatSEXP);
    Rcpp::traits::input_parameter< double >::type space_epsilon(space_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type time_res(time_resSEXP);
    Rcpp::traits::input_parameter< int >::type space_res(space_resSEXP);
    rcpp_result_gen = Rcpp::wrap(explicit_integrator_grid(bankroll, time_length, mu, rate, volat, space_epsilon, time_res, space_res));
    return rcpp_result_gen;
END_RCPP
}
// imex_integrator_grid
Eigen::MatrixXd imex_integrator_grid(double bankroll, double time_length, double mu, double rate, double volat, double space_epsilon, int time_res, int space_res);
RcppExport SEXP _LogUtility_imex_integrator_grid(SEXP bankrollSEXP, SEXP time_lengthSEXP, SEXP muSEXP, SEXP rateSEXP, SEXP volatSEXP, SEXP space_epsilonSEXP, SEXP time_resSEXP, SEXP space_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bankroll(bankrollSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type volat(volatSEXP);
    Rcpp::traits::input_parameter< double >::type space_epsilon(space_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type time_res(time_resSEXP);
    Rcpp::traits::input_parameter< int >::type space_res(space_resSEXP);
    rcpp_result_gen = Rcpp::wrap(imex_integrator_grid(bankroll, time_length, mu, rate, volat, space_epsilon, time_res, space_res));
    return rcpp_result_gen;
END_RCPP
}
// explicit_integrator1
std::vector<double> explicit_integrator1(double bankroll, double time_length, double mu, double rate, double volat, double space_epsilon, int time_res, int space_res);
RcppExport SEXP _LogUtility_explicit_integrator1(SEXP bankrollSEXP, SEXP time_lengthSEXP, SEXP muSEXP, SEXP rateSEXP, SEXP volatSEXP, SEXP space_epsilonSEXP, SEXP time_resSEXP, SEXP space_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bankroll(bankrollSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type volat(volatSEXP);
    Rcpp::traits::input_parameter< double >::type space_epsilon(space_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type time_res(time_resSEXP);
    Rcpp::traits::input_parameter< int >::type space_res(space_resSEXP);
    rcpp_result_gen = Rcpp::wrap(explicit_integrator1(bankroll, time_length, mu, rate, volat, space_epsilon, time_res, space_res));
    return rcpp_result_gen;
END_RCPP
}
// imex_integrator1
std::vector<double> imex_integrator1(double bankroll, double time_length, double mu, double rate, double volat, double space_epsilon, int time_res, int space_res);
RcppExport SEXP _LogUtility_imex_integrator1(SEXP bankrollSEXP, SEXP time_lengthSEXP, SEXP muSEXP, SEXP rateSEXP, SEXP volatSEXP, SEXP space_epsilonSEXP, SEXP time_resSEXP, SEXP space_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bankroll(bankrollSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type volat(volatSEXP);
    Rcpp::traits::input_parameter< double >::type space_epsilon(space_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type time_res(time_resSEXP);
    Rcpp::traits::input_parameter< int >::type space_res(space_resSEXP);
    rcpp_result_gen = Rcpp::wrap(imex_integrator1(bankroll, time_length, mu, rate, volat, space_epsilon, time_res, space_res));
    return rcpp_result_gen;
END_RCPP
}
// explicit_control
double explicit_control(double bankroll, double time_length, double mu, double rate, double volat, double space_epsilon, int time_res, int space_res);
RcppExport SEXP _LogUtility_explicit_control(SEXP bankrollSEXP, SEXP time_lengthSEXP, SEXP muSEXP, SEXP rateSEXP, SEXP volatSEXP, SEXP space_epsilonSEXP, SEXP time_resSEXP, SEXP space_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bankroll(bankrollSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type volat(volatSEXP);
    Rcpp::traits::input_parameter< double >::type space_epsilon(space_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type time_res(time_resSEXP);
    Rcpp::traits::input_parameter< int >::type space_res(space_resSEXP);
    rcpp_result_gen = Rcpp::wrap(explicit_control(bankroll, time_length, mu, rate, volat, space_epsilon, time_res, space_res));
    return rcpp_result_gen;
END_RCPP
}
// imex_control
double imex_control(double bankroll, double time_length, double mu, double rate, double volat, double space_epsilon, int time_res, int space_res);
RcppExport SEXP _LogUtility_imex_control(SEXP bankrollSEXP, SEXP time_lengthSEXP, SEXP muSEXP, SEXP rateSEXP, SEXP volatSEXP, SEXP space_epsilonSEXP, SEXP time_resSEXP, SEXP space_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bankroll(bankrollSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type volat(volatSEXP);
    Rcpp::traits::input_parameter< double >::type space_epsilon(space_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type time_res(time_resSEXP);
    Rcpp::traits::input_parameter< int >::type space_res(space_resSEXP);
    rcpp_result_gen = Rcpp::wrap(imex_control(bankroll, time_length, mu, rate, volat, space_epsilon, time_res, space_res));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LogUtility_explicit_integrator_grid", (DL_FUNC) &_LogUtility_explicit_integrator_grid, 8},
    {"_LogUtility_imex_integrator_grid", (DL_FUNC) &_LogUtility_imex_integrator_grid, 8},
    {"_LogUtility_explicit_integrator1", (DL_FUNC) &_LogUtility_explicit_integrator1, 8},
    {"_LogUtility_imex_integrator1", (DL_FUNC) &_LogUtility_imex_integrator1, 8},
    {"_LogUtility_explicit_control", (DL_FUNC) &_LogUtility_explicit_control, 8},
    {"_LogUtility_imex_control", (DL_FUNC) &_LogUtility_imex_control, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_LogUtility(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
